import type { Bill, Coupon, Customer, OrderItem, Product } from '@/types';

const TAX_RATE = 0.18; // 18% GST

type CalculateBillProps = {
  cart: Map<string, number>;
  customer: Customer;
  allProducts: Product[];
  couponCode?: string;
  allCoupons: Coupon[];
};

export const calculateBill = ({
  cart,
  customer,
  allProducts,
  couponCode,
  allCoupons,
}: CalculateBillProps): Bill | null => {
  if (cart.size === 0) {
    return null;
  }

  let subtotal = 0;
  const orderItems: OrderItem[] = [];

  for (const [productId, quantity] of cart.entries()) {
    const product = allProducts.find((p) => p.id === productId);
    if (!product) continue;

    const unitPrice = customer.specificPrices?.[productId] ?? product.defaultPrice;
    const lineTotal = unitPrice * quantity;

    // In a real implementation, this description could be generated by an AI flow.
    // e.g., const description = await generateLineItemDescription({ product, customer });
    const description = `Standard charge for ${product.name}`;

    const item: OrderItem = {
      product,
      quantity,
      unitPrice,
      lineTotal,
      discount: 0, // Placeholder for item-level discounts
      tax: 0, // Will be calculated later
      finalTotal: 0, // Will be calculated later
      description,
    };
    orderItems.push(item);
    subtotal += lineTotal;
  }

  const totalDiscount = orderItems.reduce((acc, item) => acc + item.discount, 0);
  let amountAfterItemDiscounts = subtotal - totalDiscount;

  // Apply coupon
  let couponDiscountAmount = 0;
  let appliedCoupon = null;
  const coupon = allCoupons.find((c) => c.code.toUpperCase() === couponCode?.toUpperCase());
  if (coupon) {
    if (coupon.type === 'percentage') {
      couponDiscountAmount = (amountAfterItemDiscounts * coupon.discount) / 100;
    } else {
      couponDiscountAmount = coupon.discount;
    }
    // Ensure discount doesn't exceed total
    couponDiscountAmount = Math.min(couponDiscountAmount, amountAfterItemDiscounts);
    appliedCoupon = { code: coupon.code, amount: couponDiscountAmount };
  }

  const taxableAmount = amountAfterItemDiscounts - couponDiscountAmount;
  const totalTax = taxableAmount * TAX_RATE;
  const cgst = totalTax / 2;
  const sgst = totalTax / 2;
  const grandTotal = taxableAmount + totalTax;

  // Distribute tax and final total to each item proportionally
  for (const item of orderItems) {
    const itemProportion = item.lineTotal / subtotal;
    item.tax = totalTax * itemProportion;
    item.finalTotal = item.lineTotal - item.discount + item.tax;
  }

  const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substring(2, 7).toUpperCase()}`;

  return {
    orderNumber,
    items: orderItems,
    subtotal,
    totalDiscount,
    couponDiscount: appliedCoupon,
    taxableAmount,
    totalTax,
    cgst,
    sgst,
    grandTotal,
  };
};
